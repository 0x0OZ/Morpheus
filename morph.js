const ethers = require('ethers');
require('dotenv').config()
let rpc = process.env.RPC
const fetch = require('node-fetch');
const keccak256 = require('keccak256')
let contractAddress = process.env.OOFAddress; // replace with your contract address
const ABI = require('./abi/morph.json')
const { Contract, BigNumber } = require("ethers");
var bigInt = require("big-integer");// store the feed inventory
let feedInventory = [];
// storage for last update timestamp
let lastUpdate = {};
let pk = process.env.PK
let contract;
// script.js
const args = process.argv.slice(2);

const flags = {};

for (let i = 0; i < args.length; i++) {
  if (args[i].startsWith('-')) {
    // If the next argument starts with '-', set the current flag's value to true.
    // Otherwise, set the current flag's value to the next argument's value.
    flags[args[i]] = args[i + 1] && !args[i + 1].startsWith('-') ? args[i + 1] : true;
  }
}

console.log('Parsed flags:', flags);

// Access individual flags like this:
const rpcFlag = flags['-r'];
const aFlag = flags['-a'];
const pkFlag = flags['-pk'];
if (rpcFlag != null) {
  rpc = rpcFlag
}
if (aFlag != null) {
  contractAddress = aFlag
}
if (pkFlag != null) {
  pk = pkFlag
}
const provider = new ethers.providers.JsonRpcProvider(rpc);

const bc = '0x6080604052600160045534801561001557600080fd5b50613dd1806100256000396000f3fe6080604052600436106101145760003560e01c80638c604296116100a0578063c37219ba11610064578063c37219ba1461037a578063c4c1d0bf146103a3578063c6311e3f146103ce578063de11c94a14610410578063ecb76d901461043b57610114565b80638c604296146102a25780638e486eec146102be5780639da6553b146102e9578063a4a4f39014610326578063ab2730161461035157610114565b80634a45ea5c116100e75780634a45ea5c146101c15780635b8d02d714610202578063639b55ba1461022d5780637f5090041461025d578063882fd7821461028657610114565b80630f3c80b2146101195780632079fb9a1461014257806324600fc31461017f57806330c942e014610196575b600080fd5b34801561012557600080fd5b50610140600480360381019061013b9190612c2c565b61047a565b005b34801561014e57600080fd5b5061016960048036038101906101649190612e2b565b610869565b60405161017691906135b6565b60405180910390f35b34801561018b57600080fd5b506101946108a8565b005b3480156101a257600080fd5b506101ab610ad1565b6040516101b89190613923565b60405180910390f35b3480156101cd57600080fd5b506101e860048036038101906101e39190612d7e565b610ad7565b6040516101f995949392919061364c565b60405180910390f35b34801561020e57600080fd5b50610217610ec4565b60405161022491906135d1565b60405180910390f35b61024760048036038101906102429190612cbb565b610eea565b604051610254919061362a565b60405180910390f35b34801561026957600080fd5b50610284600480360381019061027f9190612dbf565b61120f565b005b6102a0600480360381019061029b9190612dbf565b6114a0565b005b6102bc60048036038101906102b79190612bf0565b611638565b005b3480156102ca57600080fd5b506102d3611851565b6040516102e09190613923565b60405180910390f35b3480156102f557600080fd5b50610310600480360381019061030b9190612e2b565b611857565b60405161031d9190613923565b60405180910390f35b34801561033257600080fd5b5061033b61186f565b6040516103489190613923565b60405180910390f35b34801561035d57600080fd5b5061037860048036038101906103739190612e2b565b611875565b005b34801561038657600080fd5b506103a1600480360381019061039c9190612e54565b611c51565b005b3480156103af57600080fd5b506103b8612146565b6040516103c59190613923565b60405180910390f35b3480156103da57600080fd5b506103f560048036038101906103f09190612e2b565b612153565b60405161040796959493929190613967565b60405180910390f35b34801561041c57600080fd5b506104256121df565b60405161043291906135b6565b60405180910390f35b34801561044757600080fd5b50610462600480360381019061045d9190612e2b565b612203565b60405161047193929190613a44565b60405180910390f35b600073ffffffffffffffffffffffffffffffffffffffff1660008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614610509576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050090613843565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415610579576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057090613783565b60405180910390fd5b60008414156105bd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105b490613763565b60405180910390fd5b8451841115610601576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105f8906137e3565b60405180910390fd5b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555083600481905550846003908051906020019061065e929190612861565b5060005b6003805490508110156107b257600073ffffffffffffffffffffffffffffffffffffffff166003828154811061069457fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415610716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070d90613863565b60405180910390fd5b6001600660006003848154811061072957fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055508080600101915050610662565b50845160028190555082600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555081600a819055507ff4955da0e7ea6f8c9297d8046c39168f24abc71dd60d47c7e4e2172f28f0c93385600454600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1660405161085a939291906135ec565b60405180910390a15050505050565b6003818154811061087957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600073ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156109f45760008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6064478161094357fe5b049081150290604051600060405180830381858888f1935050505015801561096f573d6000803e3d6000fd5b50600360008154811061097e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156109ee573d6000803e3d6000fd5b50610acf565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc60644781610a3857fe5b049081150290604051600060405180830381858888f19350505050158015610a64573d6000803e3d6000fd5b50600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f19350505050158015610acd573d6000803e3d6000fd5b505b565b60025481565b606080606080606060008651905060008167ffffffffffffffff81118015610afe57600080fd5b50604051908082528060200260200182016040528015610b2d5781602001602082028036833780820191505090505b50905060008267ffffffffffffffff81118015610b4957600080fd5b50604051908082528060200260200182016040528015610b785781602001602082028036833780820191505090505b50905060008367ffffffffffffffff81118015610b9457600080fd5b50604051908082528060200260200182016040528015610bc35781602001602082028036833780820191505090505b50905060008467ffffffffffffffff81118015610bdf57600080fd5b50604051908082528060200260200182016040528015610c1357816020015b6060815260200190600190039081610bfe5790505b50905060008567ffffffffffffffff81118015610c2f57600080fd5b50604051908082528060200260200182016040528015610c6357816020015b6060815260200190600190039081610c4e5790505b50905060005b8c51811015610ea557610c8e8d8281518110610c8157fe5b6020026020010151612203565b888481518110610c9a57fe5b60200260200101888581518110610cad57fe5b60200260200101888681518110610cc057fe5b6020026020010183815250838152508381525050505060098d8281518110610ce457fe5b602002602001015181548110610cf657fe5b90600052602060002090600502016000018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610d9b5780601f10610d7057610100808354040283529160200191610d9b565b820191906000526020600020905b815481529060010190602001808311610d7e57829003601f168201915b5050505050838281518110610dac57fe5b602002602001018190525060098d8281518110610dc557fe5b602002602001015181548110610dd757fe5b90600052602060002090600502016001018054600181600116156101000203166002900480601f016020809104026020016040519081016040528092919081815260200182805460018160011615610100020316600290048015610e7c5780601f10610e5157610100808354040283529160200191610e7c565b820191906000526020600020905b815481529060010190602001808311610e5f57829003601f168201915b5050505050828281518110610e8d57fe5b60200260200101819052508080600101915050610c69565b5084848484849a509a509a509a509a5050505050505091939590929450565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60608351855114610f30576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610f27906138a3565b60405180910390fd5b600080855167ffffffffffffffff81118015610f4b57600080fd5b50604051908082528060200260200182016040528015610f7a5781602001602082028036833780820191505090505b50905060005b87518110156112015760096040518060a001604052808a8481518110610fa257fe5b60200260200101518152602001898481518110610fbb57fe5b602002602001015181526020016000815260200160008152602001888481518110610fe257fe5b6020026020010151815250908060018154018082558091505060019003906000526020600020906005020160009091909190915060008201518160000190805190602001906110329291906128eb565b50602082015181600101908051906020019061104f9291906128eb565b50604082015181600201556060820151816003015560808201518160040155505084818151811061107c57fe5b6020026020010151830192506110c985828151811061109757fe5b60200260200101516007600060016009805490500381526020019081526020016000205461228290919063ffffffff16565b600760006001600980549050038152602001908152602001600020819055506001600980549050038282815181106110fd57fe5b60200260200101818152505042600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541061115457600092505b3483111561116157600080fd5b7f98ac65ad6bf71843f1769c45ecb493aa19386b60a5eab908f85b751c90921df988828151811061118e57fe5b60200260200101518883815181106111a257fe5b60200260200101518784815181106111b657fe5b60200260200101518985815181106111ca57fe5b60200260200101516001600980549050036040516111ec9594939291906136c2565b60405180910390a18080600101915050610f80565b508092505050949350505050565b61121761230a565b815181511461125b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161125290613743565b60405180910390fd5b60005b81518110156113e3577f1460389a0c6c9278fbbacb076aa3f9f3f3696a186cd48b77be133a0cf86ba61683828151811061129457fe5b60200260200101518383815181106112a857fe5b602002602001015142336040516112c29493929190613a7b565b60405180910390a14260098483815181106112d957fe5b6020026020010151815481106112eb57fe5b90600052602060002090600502016003018190555081818151811061130c57fe5b6020026020010151600984838151811061132257fe5b60200260200101518154811061133457fe5b9060005260206000209060050201600201819055507fefcb85d3d3269dda28c4e34557d65acac42881bb77f9784a7ee168ddcdc83ab383828151811061137657fe5b602002602001015183838151811061138a57fe5b6020026020010151426040516113a293929190613a44565b60405180910390a16000600760008584815181106113bc57fe5b6020026020010151815260200190815260200160002081905550808060010191505061125e565b5060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6064478161142857fe5b049081150290604051600060405180830381858888f19350505050158015611454573d6000803e3d6000fd5b503373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f1935050505015801561149b573d6000803e3d6000fd5b505050565b80518251146114e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016114db906138a3565b60405180910390fd5b600080600090505b83518110156115ef5761154183828151811061150457fe5b60200260200101516007600087858151811061151c57fe5b602002602001015181526020019081526020016000205461228290919063ffffffff16565b6007600086848151811061155157fe5b602002602001015181526020019081526020016000208190555082818151811061157757fe5b6020026020010151820191507f3444f0007ac07416465c167c0d7657d48e9d410b498f8849035fc9cf9523976d8482815181106115b057fe5b60200260200101518483815181106115c457fe5b60200260200101516040516115da9291906139c8565b60405180910390a180806001019150506114ec565b5080341015611633576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161162a90613803565b60405180910390fd5b505050565b6000600a54141561167e576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611675906138e3565b60405180910390fd5b610e108110156116c3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016116ba90613723565b60405180910390fd5b6201518081600a5402816116d357fe5b04341015611716576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161170d906138c3565b60405180910390fd5b42600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054116117b75761176f814261228290919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061184d565b61180981600b60008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205461228290919063ffffffff16565b600b60008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055505b5050565b600a5481565b60076020528060005260406000206000915090505481565b60045481565b61187d61230a565b6000600c828154811061188c57fe5b90600052602060002090600602016005015414156118df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016118d6906137c3565b60405180910390fd5b6001600d600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f163fd1b723c0447962b4aca81cc014e8103ab3753a07542f4edbed3e59444d67813360405161197992919061393e565b60405180910390a1600080600090505b600380549050811015611a4657600d60008481526020019081526020016000206000600383815481106119b857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff1615611a395781806001019250505b8080600101915050611989565b506004548110611c4d576000600c8381548110611a5f57fe5b9060005260206000209060060201600301541415611aa357611a9e600c8381548110611a8757fe5b906000526020600020906006020160000154612398565b611c28565b6001600c8381548110611ab257fe5b9060005260206000209060060201600301541415611acf57611c27565b6002600c8381548110611ade57fe5b9060005260206000209060060201600301541415611b4257611b3d600c8381548110611b0657fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166123d9565b611c26565b6003600c8381548110611b5157fe5b9060005260206000209060060201600301541415611bb557611bb0600c8381548110611b7957fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166125a4565b611c25565b6004600c8381548110611bc457fe5b9060005260206000209060060201600301541415611c2457611c23600c8381548110611bec57fe5b906000526020600020906006020160010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166127e6565b5b5b5b5b5b6000600c8381548110611c3757fe5b9060005260206000209060060201600501819055505b5050565b611c5961230a565b6000600c8054905090506000831480611c725750600183145b80611c7d5750600783145b15611dc657600c6040518060c00160405280878152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160008152602001600181525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050155505061205e565b6005831480611dd55750600683145b15611f1d57600c6040518060c00160405280878152602001600073ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff168152602001858152602001848152602001600181525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a08201518160050155505061205d565b600c6040518060c00160405280600081526020018673ffffffffffffffffffffffffffffffffffffffff1681526020013373ffffffffffffffffffffffffffffffffffffffff16815260200185815260200160008152602001600181525090806001815401808255809150506001900390600052602060002090600602016000909190919091506000820151816000015560208201518160010160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060408201518160020160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550606082015181600301556080820151816004015560a0820151816005015550505b5b6001600d600083815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507fa7105ed77601732b2ee4362ad1a2ca325d1983be801d553d907e0aa29dcdb79a81868686336040516120fe9594939291906139f1565b60405180910390a17f163fd1b723c0447962b4aca81cc014e8103ab3753a07542f4edbed3e59444d67813360405161213792919061393e565b60405180910390a15050505050565b6000600980549050905090565b600c818154811061216357600080fd5b90600052602060002090600602016000915090508060000154908060010160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060020160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060030154908060040154908060050154905086565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6000806000806000806009878154811061221957fe5b90600052602060002090600502016002015492506009878154811061223a57fe5b90600052602060002090600502016003015491506009878154811061225b57fe5b90600052602060002090600502016004015490508282829550955095505050509193909250565b600080828401905083811015612300576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f536166654d6174683a206164646974696f6e206f766572666c6f77000000000081525060200191505060405180910390fd5b8091505092915050565b600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612396576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161238d906137a3565b60405180910390fd5b565b80600a819055507f35a14b8b09dda49419beccb57b8ab7a2333bfeb9634690a2fdd9e62ca2b73dea816040516123ce9190613923565b60405180910390a150565b60005b60038054905081101561249c578173ffffffffffffffffffffffffffffffffffffffff166003828154811061240d57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561248f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161248690613883565b60405180910390fd5b80806001019150506123dc565b506003819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506002600081548092919060010191905055506001600660008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507f3dc2a8437aef0e8d2839b5e75d0d93e6c7f43b3acf5d2ef2db79beb54cb47b3d8160405161259991906135b6565b60405180910390a150565b600660008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff16612630576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161262790613903565b60405180910390fd5b600454600160038054905003101561267d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161267490613823565b60405180910390fd5b60005b6003805490508110156127e2578173ffffffffffffffffffffffffffffffffffffffff16600382815481106126b157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156127d5576003818154811061270557fe5b9060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff0219169055600260008154809291906001900391905055506000600660008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055507ffa15964370ccf7acface74df78a85aa4857e703226c446d3e24a69663dc302e7826040516127cc91906135b6565b60405180910390a15b8080600101915050612680565b5050565b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507f4bc0293774d2baff337ab66d049d9fb89b31c492a1c82fd1b53d43ac85e8da518160405161285691906135b6565b60405180910390a150565b8280548282559060005260206000209081019282156128da579160200282015b828111156128d95782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190612881565b5b5090506128e79190612979565b5090565b828054600181600116156101000203166002900490600052602060002090601f0160209004810192826129215760008555612968565b82601f1061293a57805160ff1916838001178555612968565b82800160010185558215612968579182015b8281111561296757825182559160200191906001019061294c565b5b5090506129759190612979565b5090565b5b8082111561299257600081600090555060010161297a565b5090565b60006129a96129a484613af1565b613ac0565b905080838252602082019050828560208602820111156129c857600080fd5b60005b858110156129f857816129de8882612b09565b8452602084019350602083019250506001810190506129cb565b5050509392505050565b6000612a15612a1084613b1d565b613ac0565b9050808382526020820190508260005b85811015612a555781358501612a3b8882612bb1565b845260208401935060208301925050600181019050612a25565b5050509392505050565b6000612a72612a6d84613b49565b613ac0565b90508083825260208201905082856020860282011115612a9157600080fd5b60005b85811015612ac15781612aa78882612bdb565b845260208401935060208301925050600181019050612a94565b5050509392505050565b6000612ade612ad984613b75565b613ac0565b905082815260208101848484011115612af657600080fd5b612b01848285613d01565b509392505050565b600081359050612b1881613d56565b92915050565b600081359050612b2d81613d6d565b92915050565b600082601f830112612b4457600080fd5b8135612b54848260208601612996565b91505092915050565b600082601f830112612b6e57600080fd5b8135612b7e848260208601612a02565b91505092915050565b600082601f830112612b9857600080fd5b8135612ba8848260208601612a5f565b91505092915050565b600082601f830112612bc257600080fd5b8135612bd2848260208601612acb565b91505092915050565b600081359050612bea81613d84565b92915050565b60008060408385031215612c0357600080fd5b6000612c1185828601612b09565b9250506020612c2285828601612bdb565b9150509250929050565b600080600080600060a08688031215612c4457600080fd5b600086013567ffffffffffffffff811115612c5e57600080fd5b612c6a88828901612b33565b9550506020612c7b88828901612bdb565b9450506040612c8c88828901612b1e565b9350506060612c9d88828901612bdb565b9250506080612cae88828901612b09565b9150509295509295909350565b60008060008060808587031215612cd157600080fd5b600085013567ffffffffffffffff811115612ceb57600080fd5b612cf787828801612b5d565b945050602085013567ffffffffffffffff811115612d1457600080fd5b612d2087828801612b5d565b935050604085013567ffffffffffffffff811115612d3d57600080fd5b612d4987828801612b87565b925050606085013567ffffffffffffffff811115612d6657600080fd5b612d7287828801612b87565b91505092959194509250565b600060208284031215612d9057600080fd5b600082013567ffffffffffffffff811115612daa57600080fd5b612db684828501612b87565b91505092915050565b60008060408385031215612dd257600080fd5b600083013567ffffffffffffffff811115612dec57600080fd5b612df885828601612b87565b925050602083013567ffffffffffffffff811115612e1557600080fd5b612e2185828601612b87565b9150509250929050565b600060208284031215612e3d57600080fd5b6000612e4b84828501612bdb565b91505092915050565b60008060008060808587031215612e6a57600080fd5b6000612e7887828801612bdb565b9450506020612e8987828801612b09565b9350506040612e9a87828801612bdb565b9250506060612eab87828801612bdb565b91505092959194509250565b6000612ec38383612f19565b60208301905092915050565b6000612edb8383613068565b905092915050565b6000612eef8383613598565b60208301905092915050565b612f0481613ccb565b82525050565b612f1381613c8f565b82525050565b612f2281613c7d565b82525050565b612f3181613c7d565b82525050565b6000612f4282613bd5565b612f4c8185613c28565b9350612f5783613ba5565b8060005b83811015612f88578151612f6f8882612eb7565b9750612f7a83613c01565b925050600181019050612f5b565b5085935050505092915050565b6000612fa082613be0565b612faa8185613c39565b935083602082028501612fbc85613bb5565b8060005b85811015612ff85784840389528151612fd98582612ecf565b9450612fe483613c0e565b925060208a01995050600181019050612fc0565b50829750879550505050505092915050565b600061301582613beb565b61301f8185613c4a565b935061302a83613bc5565b8060005b8381101561305b5781516130428882612ee3565b975061304d83613c1b565b92505060018101905061302e565b5085935050505092915050565b600061307382613bf6565b61307d8185613c5b565b935061308d818560208601613d10565b61309681613d45565b840191505092915050565b60006130ac82613bf6565b6130b68185613c6c565b93506130c6818560208601613d10565b6130cf81613d45565b840191505092915050565b60006130e7601a83613c6c565b91507f4d696e696d756d20737562736372697074696f6e2069732031680000000000006000830152602082019050919050565b6000613127602b83613c6c565b91507f56616c7565206c656e67746820616e6420666565644944206c656e677468206460008301527f6f206e6f74206d617463680000000000000000000000000000000000000000006020830152604082019050919050565b600061318d601383613c6c565b91507f5468726573686f6c642063616e742062652030000000000000000000000000006000830152602082019050919050565b60006131cd601783613c6c565b91507f666163746f72792063616e206e6f74206265206e756c6c0000000000000000006000830152602082019050919050565b600061320d602583613c6c565b91507f4f6e6c792061207369676e65722063616e20706572666f726d2074686973206160008301527f6374696f6e0000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613273601383613c6c565b91507f50726f706f73616c206e6f7420616374697665000000000000000000000000006000830152602082019050919050565b60006132b3602883613c6c565b91507f5468726573686f6c642063616e74206265206d6f7265207468656e207369676e60008301527f657220636f756e740000000000000000000000000000000000000000000000006020830152604082019050919050565b6000613319602683613c6c565b91507f4d73672e76616c756520646f6573206e6f74206d65657420737570706f72742060008301527f76616c75657300000000000000000000000000000000000000000000000000006020830152604082019050919050565b600061337f601b83613c6c565b91507f4c657373207369676e657273207468616e207468726573686f6c6400000000006000830152602082019050919050565b60006133bf601383613c6c565b91507f616c726561647920696e697469616c697a6564000000000000000000000000006000830152602082019050919050565b60006133ff601083613c6c565b91507f4e6f74207a65726f2061646472657373000000000000000000000000000000006000830152602082019050919050565b600061343f601583613c6c565b91507f5369676e657220616c72656164792065786973747300000000000000000000006000830152602082019050919050565b600061347f600f83613c6c565b91507f4c656e677468206d69736d6174636800000000000000000000000000000000006000830152602082019050919050565b60006134bf601283613c6c565b91507f4e6f7420656e6f756768207061796d656e7400000000000000000000000000006000830152602082019050919050565b60006134ff601c83613c6c565b91507f537562736372697074696f6e2050617373207475726e6564206f6666000000006000830152602082019050919050565b600061353f602483613c6c565b91507f4164647265737320746f2072656d6f76652068617320746f206265206120736960008301527f676e6572000000000000000000000000000000000000000000000000000000006020830152604082019050919050565b6135a181613cc1565b82525050565b6135b081613cc1565b82525050565b60006020820190506135cb6000830184612f28565b92915050565b60006020820190506135e66000830184612f0a565b92915050565b600060608201905081810360008301526136068186612f37565b905061361560208301856135a7565b6136226040830184612efb565b949350505050565b60006020820190508181036000830152613644818461300a565b905092915050565b600060a0820190508181036000830152613666818861300a565b9050818103602083015261367a818761300a565b9050818103604083015261368e818661300a565b905081810360608301526136a28185612f95565b905081810360808301526136b68184612f95565b90509695505050505050565b600060a08201905081810360008301526136dc81886130a1565b905081810360208301526136f081876130a1565b90506136ff60408301866135a7565b61370c60608301856135a7565b61371960808301846135a7565b9695505050505050565b6000602082019050818103600083015261373c816130da565b9050919050565b6000602082019050818103600083015261375c8161311a565b9050919050565b6000602082019050818103600083015261377c81613180565b9050919050565b6000602082019050818103600083015261379c816131c0565b9050919050565b600060208201905081810360008301526137bc81613200565b9050919050565b600060208201905081810360008301526137dc81613266565b9050919050565b600060208201905081810360008301526137fc816132a6565b9050919050565b6000602082019050818103600083015261381c8161330c565b9050919050565b6000602082019050818103600083015261383c81613372565b9050919050565b6000602082019050818103600083015261385c816133b2565b9050919050565b6000602082019050818103600083015261387c816133f2565b9050919050565b6000602082019050818103600083015261389c81613432565b9050919050565b600060208201905081810360008301526138bc81613472565b9050919050565b600060208201905081810360008301526138dc816134b2565b9050919050565b600060208201905081810360008301526138fc816134f2565b9050919050565b6000602082019050818103600083015261391c81613532565b9050919050565b600060208201905061393860008301846135a7565b92915050565b600060408201905061395360008301856135a7565b6139606020830184612efb565b9392505050565b600060c08201905061397c60008301896135a7565b6139896020830188612f28565b6139966040830187612f28565b6139a360608301866135a7565b6139b060808301856135a7565b6139bd60a08301846135a7565b979650505050505050565b60006040820190506139dd60008301856135a7565b6139ea60208301846135a7565b9392505050565b600060a082019050613a0660008301886135a7565b613a1360208301876135a7565b613a206040830186612f28565b613a2d60608301856135a7565b613a3a6080830184612efb565b9695505050505050565b6000606082019050613a5960008301866135a7565b613a6660208301856135a7565b613a7360408301846135a7565b949350505050565b6000608082019050613a9060008301876135a7565b613a9d60208301866135a7565b613aaa60408301856135a7565b613ab76060830184612efb565b95945050505050565b6000604051905081810181811067ffffffffffffffff82111715613ae757613ae6613d43565b5b8060405250919050565b600067ffffffffffffffff821115613b0c57613b0b613d43565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b3857613b37613d43565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b6457613b63613d43565b5b602082029050602081019050919050565b600067ffffffffffffffff821115613b9057613b8f613d43565b5b601f19601f8301169050602081019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b6000602082019050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b600082825260208201905092915050565b6000613c8882613ca1565b9050919050565b6000613c9a82613ca1565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000613cd682613cdd565b9050919050565b6000613ce882613cef565b9050919050565b6000613cfa82613ca1565b9050919050565b82818337600083830152505050565b60005b83811015613d2e578082015181840152602081019050613d13565b83811115613d3d576000848401525b50505050565bfe5b6000601f19601f8301169050919050565b613d5f81613c7d565b8114613d6a57600080fd5b50565b613d7681613c8f565b8114613d8157600080fd5b50565b613d8d81613cc1565b8114613d9857600080fd5b5056fea2646970667358221220baf5b3e7bc0801e2b545b405e2d428a1cf13a1c1716cc9375852cbaebb0ed5e064736f6c63430007060033';
const walletWithProvider = new ethers.Wallet(pk, provider);
//const signers = ['0x00f0000000f11a5380da5a184f0c563b5995fee2'];
const threshold = 1

async function init() {

  console.log("Deploying your Morpheus contract");
  // Get the ABI (Application Binary Interface) of the contract
  // Replace with the actual ABI of your contract
  const wallet = new ethers.Wallet(pk, provider);
  const signer = wallet.connect(provider);
  const contractFactory = new ethers.ContractFactory(ABI, bc, signer);
  const signers = [wallet.address];
  const deployedContract = await contractFactory.deploy();
  await deployedContract.deployed();

  console.log("Contract address:", deployedContract.address);
  // Create a contract object
  const contract = new ethers.Contract(deployedContract.address, ABI, walletWithProvider);
  try {
    let tx = await contract.initialize(signers, threshold, '0x0000000000000000000000000000000000000000', 0, '0x3c7d411cd262d3Fe4c0432C7412341aFc33efd11');
    const { events, cumulativeGasUsed, gasUsed, transactionHash } = await tx.wait();
    console.log(`Cumulative: ${cumulativeGasUsed.toNumber()}`);
    console.log(`Gas: ${gasUsed.toNumber()}`)
    console.log(`hash: ${transactionHash.toString()}`)
    console.log("oracle ready")
  } catch (e) {
    console.log(e)
  } return deployedContract.address
}
const fs = require('fs');

async function main() {
  if (contractAddress == '') {
    contractAddress = await init();
    // Read the contents of the .env file
    const envContents = fs.readFileSync('./.env', 'utf-8');

    // Replace the OOFAddress value with the new one
    const newEnvContents = envContents.replace(/^OOFAddress=.*$/m, `OOFAddress=${contractAddress}`);

    // Write the updated contents back to the .env file
    fs.writeFileSync('.env', newEnvContents);
    contract = new ethers.Contract(contractAddress, ABI, provider)
    node()
  } else {
    contract = new ethers.Contract(contractAddress, ABI, provider)
    node()
  }
}
async function node() {
  console.log('Watching for requests');
  console.log('address ', contractAddress);
  const oofContract = !!ABI && !!walletWithProvider
    ? new Contract(contractAddress, ABI, walletWithProvider)
    : undefined; let i;
  async function vrfHash(value, feedID, fl) {
    let hash = ethers.utils.keccak256(pk.toString);
    console.log('seed ', hash);
    let hash2
    if (fl == 1) {
      feedID -= 1;
    }
    for (let i = 0; i < 100000 - feedID; i++) {
      hash = ethers.utils.keccak256(hash);
    }
    hash2 = keccak256(hash + value + feedID).toString('hex')
    console.log('VRF seed ', hash);
    let hashBN = ethers.BigNumber.from(hash);
    let uint256 = hashBN
    hash = uint256.toString();
    console.log('seed uint ', hash);
    hashBN = ethers.BigNumber.from('0x' + hash2);
    uint256 = hashBN
    hash2 = uint256.toString()
    console.log('val ', hash2, feedID);
    if (fl == 1) {
      submit(feedID + 1, hash);
    } else {
      submit(feedID, hash2);
    }
  }
  contract.on('feedRequested', (endpoint, endpointp, dc, c, feedId,) => {
    console.log('New feed requested:');
    console.log(`Endpoint: ${endpoint}`);
    console.log(`Endpointp: ${endpointp}`);
    console.log(`Decimal: ${c}`);
    console.log(`Feed ID: ${feedId}`);
    if (endpoint == 'vrf' || endpoint == 'VRF') {
      if (endpointp == 'proof') {
        vrfHash(endpointp, feedId, 1)// code to execute if endpoint is 'vrf' or 'VRF'
      } else {
        vrfHash(endpointp, feedId, 0)// code to execute if endpoint is 'vrf' or 'VRF'
      }
    } else {
      let parsingargs = []

      try {
        parsingargs = endpointp.split(",");
      } catch { }

      let tempInv = {
        "feedId": feedId,
        "endpoint": endpoint,
        "dc": dc,
        "c": c,
        "parsingargs": parsingargs
      }

      // process into global feed array
      feedInventory.push(tempInv)
      processFeeds(endpoint, endpointp, parsingargs, feedId, c)
    }
  });
  async function processFeeds(endpoint, endpointp, parsingargs, feedId, c) {
    let i; let feedIdArray = []
    let feedValueArray = []
    console.log("checking feed APIs")
    //for (i = 0; i < feedInventory.length; i++) {
    let res
    let body
    try {
      res = await fetch(endpoint);
      body = await res.json();
      console.log(body)
      let j;
      let toParse = body;
      for (j = 0; j < parsingargs.length; j++) {
        toParse = toParse[parsingargs[j]]
      }
      console.log(toParse)
      if (toParse != "") {
        toParse = parseFloat(toParse) * (10 ** c)
        console.log(Math.round(toParse).toLocaleString('fullwide', { useGrouping: false }))
        toParse = Math.round(toParse).toLocaleString('fullwide', { useGrouping: false })
      }
      console.log("Submitting " + toParse)

      // push values
      feedIdArray.push(feedId)
      feedValueArray.push(toParse)

      // set new update timestamp
      lastUpdate[feedId] = Date.now()


      const provider = new ethers.providers.JsonRpcProvider(rpc);
      const oofAddress = process.env.OOFAddress
      const walletWithProvider = new ethers.Wallet(pk, provider); const oofContract = !!ABI && !!walletWithProvider
        ? new Contract(oofAddress, ABI, walletWithProvider)
        : undefined;
      let nonce = await walletWithProvider.getTransactionCount();
      let gasPrice = await provider.getGasPrice()
      let tx_obk = {

        gasPrice: gasPrice
      }
      async function wait(ms) {
        return new Promise(resolve => {
          setTimeout(resolve, ms);
        });
      } const gasL = await oofContract.estimateGas.submitFeed(feedIdArray, feedValueArray, tx_obk);
      const gasF = gasL * gasPrice;
      // console.log('Gas fee:', ethers.utils.formatEther(gasF.toString()), 'ETH ', ethers.utils.formatUnits(gasPrice, "gwei") + " gwei");
      // console.log('Bounty ', ethers.utils.formatEther(await oofContract.feedSupport(feedId)).toString())

      const gF = (await oofContract.feedSupport(feedId) - gasF).toString()
      //  console.log('ETH Profit', ethers.utils.formatEther(gF))
      if (ethers.utils.formatEther(gF) > 0) {
        submit(feedId, toParse, 0)
      }
      else {
        console.log('not profitable')
      }
    }
    catch { console.log('Could not process feed request API ', endpoint, ' path ', endpointp, ' args ', parsingargs, ' feed request ID ', feedId, ' c ', c) }
  }

  contract.on('feedSupported', (feedd) => {

    console.log('New feed Support:')
    let feedId = []; feedId[0] = feedd;
    const oofAddress = process.env.OOFAddress

    const walletWithProvider = new ethers.Wallet(pk, provider);
    const oofContract = !!ABI && !!walletWithProvider
      ? new Contract(oofAddress, ABI, walletWithProvider)
      : undefined;

    let tempInv = {
      "feedId": feedId,
      //    "endpoint": endpoint,
      //    "dc": dc,
      //    "c": c,
      //    "parsingargs": parsingargs
    }

    // process into global feed array
    feedInventory.push(tempInv)
    processFds(feedId)
  });
  async function processFds(feedId) {
    const provider = new ethers.providers.JsonRpcProvider(rpc);
    const oofAddress = process.env.OOFAddress
    let feedIdArray = []
    let feedValueArray = []
    const d = await oofContract.getFeeds(feedId)
    let c
    let endpoint
    let endpointp
    // for (i = 0; i < d.length; i++) {
    c = d[2][0]
    endpoint = d[3][0]
    endpointp = d[4][0]
    //}
    console.log(`Endpoint: ${endpoint}`);
    console.log(`Endpointp: ${endpointp}`);
    console.log(`Decimal: ${c}`);
    console.log(`Feed ID: ${feedId}`);
    if (endpoint === 'vrf' || endpoint === 'VRF') {
      if (endpointp == 'proof') {
        vrfHash(endpointp, Number(feedId), 1)// code to execute if endpoint is 'vrf' or 'VRF'
      } else {
        vrfHash(endpointp, Number(feedId), 0)// code to execute if endpoint is 'vrf' or 'VRF'
      }
    } else {
      let parsingargs = []
      try {
        parsingargs = endpointp.split(",");
      } catch { }
      console.log("checking feed APIs")
      try {
        //for (i = 0; i < feedInventory.length; i++) {
        const res = await fetch(endpoint);
        const body = await res.json();

        console.log(body)
        let j;
        let toParse = body;
        console.log(toParse)
        for (j = 0; j < parsingargs.length; j++) {

          toParse = toParse[parsingargs[j]]
        }
        console.log(toParse)
        if (toParse != "") {
          toParse = parseFloat(toParse) * (10 ** c)
          console.log(Math.round(toParse).toLocaleString('fullwide', { useGrouping: false }))
          toParse = Math.round(toParse).toLocaleString('fullwide', { useGrouping: false })
        }
        console.log("Submitting " + toParse)

        // push values
        feedId = Number(feedId)
        feedIdArray.push(feedId)
        feedValueArray.push(toParse)

        // set new update timestamp
        lastUpdate[feedId] = Date.now()

        let gasPrice = await provider.getGasPrice()
        let tx_obk = {

          gasPrice: gasPrice
        }
        const gasL = await oofContract.estimateGas.submitFeed(feedIdArray, feedValueArray, tx_obk);

        const gasF = gasL * gasPrice;

        // console.log('Gas fee:', ethers.utils.formatEther(gasF.toString()), 'ETH ', ethers.utils.formatUnits(gasPrice, "gwei") + " gwei");
        //console.log('Bounty ', ethers.utils.formatEther(await oofContract.feedSupport(feedId)).toString())
        //console.log('ETH Profit', ethers.utils.formatEther(ethProfit.toString()));

        const gF = (await oofContract.feedSupport(feedId) - gasF).toString()
        // console.log('ETH Profit ', gF);

        if (ethers.utils.formatEther(gF) > 0) {
          submit(feedId, toParse, 0)
        }
        else {
          console.log('not profitable')
        }
      }
      catch { console.log('Could not process feed request API ', endpoint, ' path ', endpointp, ' args ', parsingargs, ' feed request ID ', Number(feedId), ' c ', c) }
    }
  }
  let txa = []
  async function submit(feedId, value, fl) {

    if (txa.length == 0 || fl == 1) {
      // If not, add the new feedId and value to the queue
      txa.unshift({ feedId: feedId, value: value });
      const gasPrice = await provider.getGasPrice();
      const tx_obk = { gasPrice };
      const gasLimit = await oofContract.estimateGas.submitFeed(
        [feedId],
        [value],
        tx_obk
      );
      const gasFee = gasLimit.mul(gasPrice);
      let sup = await oofContract.feedSupport(feedId)
      const ethProfit = sup - gasFee;

      console.log('Gas fee:', ethers.utils.formatEther(gasFee.toString()), 'ETH ', ethers.utils.formatUnits(gasPrice, "gwei") + " gwei");
      console.log('Bounty ', ethers.utils.formatEther(sup))
      console.log('ETH Profit', ethers.utils.formatEther(ethProfit.toString()));


      if (ethProfit > 0) {
        console.log(
          "submitting with gas price: " +
          ethers.utils.formatUnits(gasPrice, "gwei") +
          " gwei"
        );
        console.log("submitting feeds...");
        const tx = await oofContract.submitFeed([feedId], [value], tx_obk);
        console.log(
          `submitted feed id ${feedId} with value ${value} at ${Date.now()}`
        );
        console.log("Transaction hash: " + tx.hash);
        await tx.wait();
        console.log(`Transaction confirmed at ${Date.now()}`);

        // Remove the processed value from the queue
        txa.shift();
        // Check if there are any values left in the queue
        if (txa.length > 0) {

          // Submit the next value in the queue
          const nextVal = txa[0]; txa.shift();


          submit(nextVal.feedId, nextVal.value, 1);

        }
      } else {
        console.log("not profitable");

        // Remove the processed value from the queue
        txa.shift();
        // Check if there are any values left in the queue
        if (txa.length > 0) {
          // Submit the next value in the queue
          const nextVal = txa[0]; txa.shift();
          await submit(nextVal.feedId, nextVal.value, 1);
        }
      }
    } else {
      // If not, add the new feedId and value to the queue
      if (txa.some((item) => item.feedId === feedId && item.value === value)) {
        console.log(`Feed id ${feedId} with value ${value} already in queue`);
      } else {
        txa.push({ feedId: feedId, value: value });
      }
      console.log(`Added feed id ${feedId} with value ${value} to queue`);
    }
  }
}
main()